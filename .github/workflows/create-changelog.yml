name: 정기 릴리즈를 위한 ChangeLog 생성

on:
  workflow_dispatch:
    inputs:
      sprint_number:
        description: '스프린트 번호'
        required: true
        default: '90'
  # schedule:
  #   - cron: "0 9 * * 1"  # 예: 매주 월요일 오전 9시에 실행 (UTC 기준)
  # push:
  #   branches:
  #     - 'release/*'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 브랜치 최신화
      - name: Update remote branches
        run: git remote update

      - name: Checkout and update develop branch
        run: |
          git checkout develop
          git pull origin develop

      - name: Checkout and update master branch
        run: |
          git checkout master
          git pull origin master

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.0'

      - name: Install git flow
        run: |
          sudo apt-get update
          sudo apt-get install -y git-flow

      - name: Get today's date
        id: get_date
        run: |
          echo "TODAY_DATE=$(node -e 'const today = new Date(); console.log(`${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, "0")}${String(today.getDate()).padStart(2, "0")}`)')" >> $GITHUB_ENV

      # 릴리즈 브랜치 생성
      - name: Start Release with git flow and lerna version
        run: |
          git flow init -d
          git flow release start -F ${{ env.TODAY_DATE }}

          # FIXME - 만약 feat가 없다면? 
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git commit --allow-empty -m "feat: release"

          git flow release publish ${{ env.TODAY_DATE }}
          yarn run version
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG.md"
          git push origin release/${{ env.TODAY_DATE }}

      # 이번 스프린트 작업 내역 파싱(릴리즈 노트를 위한 내용)
      - name: Read the latest minor CHANGELOG entry
        run: |
          # 최근 '##' 헤더부터 이전 '##' 헤더까지 내용을 CHANGELOG.md에서 추출
          CHANGELOG=$(awk '/^## \[/{if (found) exit; found=1} found' CHANGELOG.md)

          echo "GET CHANGELOG: $CHANGELOG"

          # 마크다운 타이틀을 Slack에서 굵게로 변환
          CHANGELOG=$(echo "$CHANGELOG" | sed -E 's/^##+ (.+)/*\1*/')

          echo "TITLE TO BOLD: $CHANGELOG"

          # 마크다운 URL을 Slack 포맷 URL로 변환
          CHANGELOG=$(echo "$CHANGELOG" | sed -E 's/\\?([[][^]]+]\\?)\\?[(]([^()]+)\\?[)]/<\2|\1>/g')

          echo "CONVERT TO SLACK FORMAT: $CHANGELOG"

          #FIXME - test echo changelog
          echo "$CHANGELOG"

          # 수정된 변경로그를 환경 파일에 작성
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Get current package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.2.3
        with:
          path: packages/my-components/

      # - name: Send to Slack via Webhook
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEB_HOOK }}
      #     CHANGELOG_CONTENT: ${{ env.CHANGELOG_CONTENT }}
      #   run: |
      #     # JSON 구문 오류를 방지하기 위해 변경로그 내용의 이중 따옴표를 이스케이프
      #     ESCAPED_CHANGELOG_CONTENT=$(echo "$CHANGELOG_CONTENT" | sed 's/\^H//g' | sed 's/"/\\"/g')

      #     # 결합된 메시지를 Slack으로 전송
      #     curl -X POST --data-urlencode "payload={
      #     \"username\": \"GDS-bot\",
      #     \"attachments\": [
      #         {
      #         \"pretext\": \"*@vapor-alarm* Vapor Packages ${{ steps.package-version.outputs.current-version }}(<https://vapor.goorm.io/guides/change-log| changelog>)가 릴리즈 됐습니다 :tada:\",
      #         \"color\": \"#5094FA\",
      #         },
      #         {
      #         \"color\": \"#36a64f\",
      #         \"blocks\": [
      #             {
      #             \"type\": \"section\",
      #             \"text\": {
      #                 \"type\": \"mrkdwn\",
      #                 \"text\": \"${ESCAPED_CHANGELOG_CONTENT}\"
      #             }
      #             }
      #         ]
      #         }
      #     ]
      #     }" "${{ secrets.SLACK_WEB_HOOK }}"

      - name: Send Slack Message
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.TEST_CHANNEL_ID }}
          payload: |
            {
              "text": "release message",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "이번 스프린트 릴리즈 노트를 작성해주세요",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "릴리즈 브랜치: <|>"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "emoji": true,
                      "text": "승인"
                    },
                    "style": "primary",
                    "value": "accept release"
                  },
                }
              ]
            }

        env:
          SLACK_BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN }}

      # 릴리즈 브랜치 닫기
      - name: Publish Release Branch
        run: |
          git flow release finish -Fpn ${{ env.TODAY_DATE }}
